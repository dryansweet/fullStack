{"version":3,"sources":["components/Note.js","components/Error.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","updatedNotes","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,EAApC,OCOSK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,I,gBCgBM,EAtBA,WACX,IAAMC,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAc1C,EAXE,SAAAO,GAEb,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANE,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCgF9BK,EA7FH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,0BAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAoCrBC,qBAAU,WACRC,IAEGnB,MAAK,SAAAoB,GACJT,EAASS,QAEZ,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAsBMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAAxC,GAAI,OAAuB,IAAnBA,EAAKG,aAChE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASuB,IACvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGU,EAAYE,KAAI,SAACzC,EAAM0C,GAAP,OACf,kBAAE,EAAF,CAAOC,IAAKD,EAAG1C,KAAMA,EAAMC,iBAAkB,kBAzE1B,SAACY,GAC1B,IAAMb,EAAOyB,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhD+B,EACUrB,EAAIiC,GACX/B,MAAK,SAAAgC,GACJrB,EAASD,EAAMgB,KAAI,SAAAzC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO+C,SAEpDC,OAAM,SAAAC,GACLjB,EAAgB,SAAD,OACJhC,EAAKK,QADD,sCAGf6C,YAAW,WACTlB,EAAgB,QACf,QA0DkDmB,CAAmBnD,EAAKa,WAG/E,0BAAMuC,SArCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAASsB,EACTb,MAAM,IAAI0C,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3B9C,GAAIY,EAAMa,OAAS,GAGrBJ,EACQqB,GACPxC,MAAK,SAAAgC,GACJrB,EAASD,EAAMP,OAAO6B,IACtBnB,EAAW,OAEbF,EAASD,EAAMP,OAAOqC,IACtB3B,EAAW,MAsBP,2BACEgC,MAAOjC,EACPkC,SAtBiB,SAACR,GACxBjB,QAAQC,IAAIgB,EAAMS,OAAOF,OACzBhC,EAAWyB,EAAMS,OAAOF,UAsBpB,4BAAQG,KAAK,UAAb,W,MCzFRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.85780acc.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label} </button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n      id: 10000,\n      content: 'This note is not saved to server',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Error'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(updatedNotes => {\n        setNotes(notes.map(note => note.id !== id ? note : updatedNotes))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  // const hook = () => {\n  //   console.log('effect')\n  //   axios\n  //     .get('http://localhost:3001/notes')\n  //     .then(response => {\n  //       console.log('promise fulfilled')\n  //       setNotes(response.data)\n  //     })\n  // }\n  // useEffect(hook, [])\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n    .create(noteObject)\n    .then(updatedNotes => {\n      setNotes(notes.concat(updatedNotes))\n      setNewNote('')\n    })\n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          < Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}